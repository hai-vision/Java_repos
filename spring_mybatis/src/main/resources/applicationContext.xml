<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath:jdbc.properties" system-properties-mode="FALLBACK"></context:property-placeholder>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" >
        <!-- 基本配置 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置连接池的最大/小 连接数-->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>

        <!--超时等待时间-->
        <property name="maxWait" value="${jdbc.maxWait}"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>

        <!-- 注入dao-mapper文件信息，如果映射文件和dao接口 同包且同名，则此配置可省略-->
        <property name="mapperLocations">
            <list>
                <value>classpath:UserDAOMapper.xml</value>
            </list>
        </property>

        <!--
            1. 为dao-mapper文件中的实体，定义缺省包路径
        -->
        <property name="typeAliasesPackage" value="com.xxxx.domain"/>
    </bean>

    <!--
        配置MapperScannerConfigurer的作用
        1. 扫描所有DAO接口，构建DAO实现
        2. 将DAO实现存入工厂管理
        3. DAO实现对象在工厂中的id是：“首字母小写的-接口类名”，例如：UserDAO ==》 UserDAO
    -->
    <bean id="mapperScannerConfigurer9" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- set注入的内容
            1. dao 接口所在的包，如果有多个包，可以用逗号分隔
        -->
        <property name="basePackage" value="com.xxxx.dao"></property>
        <!--2. 如果工厂只有一个SqlSessionFactory的bean，此配置可以省略-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>

    </bean>

    <bean id="userService" class="com.xxxx.service.impl.UserServiceImpl">
        <!-- 通过MapperScannerConfigurer，得到userDAO对象-->
        <property name="userDAO" ref="userDAO"></property>
    </bean>

    <!-- 引入一个事务管理器，其中依赖DataSource，借此获得连接，进而控制事务逻辑-->
    <bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 事务通知，额外功能 -->
    <tx:advice id="txManager" transaction-manager="tx">
        <!-- 事务属性 -->
        <tx:attributes>
            <!-- 以User结尾的方法，切入此方法，采用对应的事务实行 -->
            <tx:method name="*User"/>
            <!--
                以query开头的方法，切入此方法，采用对应的事务实行
                propagation：传播行为
                SUPPORTS：适用于查询
                REQUIRED：适用于增删改
            -->
            <tx:method name="query*" propagation="SUPPORTS"/>
            <!-- 剩余所有方法-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="aop_tx" expression="execution(* com.xxxx.service.impl.UserServiceImpl.*(..))"/>
        <aop:advisor advice-ref="txManager" pointcut-ref="aop_tx"/>
    </aop:config>


</beans>